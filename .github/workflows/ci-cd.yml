name: CRM CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'sprint*'
  pull_request:
    branches:
      - main

concurrency:
  group: crm-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 18

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  lint:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: |
          if [ -f package.json ]; then npm ci; else echo "No package.json, skipping"; fi
      - run: |
          if npm run -s lint --silent >/dev/null 2>&1; then npm run lint; else echo "No lint script found. Skipping."; fi
      - run: |
          if grep -q "\"typescript\"" package.json; then npm run typecheck --if-present || (echo "Typecheck failed" && exit 1); else echo "No TypeScript found, skipping typecheck."; fi

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - run: |
          if npm run -s test --silent >/dev/null 2>&1; then npm test; else echo "No test script found. Skipping tests."; fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-output
          path: ./test-results || .

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      build-succeeded: ${{ steps.build-step.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - name: Build Vite App
        id: build-step
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_PROJECT_ID: ${{ secrets.VITE_SUPABASE_PROJECT_ID }}
        run: |
          if [ -z "${VITE_SUPABASE_URL}" ] || [ -z "${VITE_SUPABASE_PUBLISHABLE_KEY}" ]; then
            echo "Warning: VITE_SUPABASE_* secrets are not set."
          fi
          npm run build
      - run: |
          if [ -f package.json ]; then npm audit --audit-level=high || echo "npm audit found issues — continuing"; else echo "No package.json found, skipping audit"; fi
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: vite-build
          path: dist

  deploy:
    name: Deploy (Vercel)
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs['build-succeeded'] == 'true' || always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm install -g vercel@28 || true

      - name: Vercel — Deploy Preview
        if: github.ref != 'refs/heads/main'
        uses: amondnet/vercel-action@v21
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          prod: false
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_PROJECT_ID: ${{ secrets.VITE_SUPABASE_PROJECT_ID }}

      - name: Vercel — Deploy Production
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v21
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          prod: true
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_PROJECT_ID: ${{ secrets.VITE_SUPABASE_PROJECT_ID }}
